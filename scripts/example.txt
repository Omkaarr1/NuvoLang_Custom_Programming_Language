use database;
use blockchain;
use data_science;
use ml;

// Variable Assignments and Arithmetic Operations
x = 10;
x = x + 5;
print->"Value of x = " + x;
y = 20;
y++;
print->"Value of y after increment = " + y;
z = x * y;
print->"Value of z = " + z;

// Conditional Statement
if (z > 100) { 
    print->"z is greater than 100"; 
} else { 
    print->"z is not greater than 100"; 
}

// Encrypted Variable
@ENCsecret = "mySecretValue";
print->"Encrypted secret = " + @ENCsecret;

// Event Trigger: Print "Hello" every 5 seconds
//@EVENT_TRIGGER(5, "seconds") -> print->"Hello";

// Function Definition and Call
function add(a, b) {
    return a + b;
};

result = add(10, 20);
print->"Result of add function = " + result;

// Machine Learning Operations
rfModel = ml.randomforest("scripts/data.csv", "class");
print->"Random Forest Model: " + rfModel;

// Blockchain Operations
blockchain.init("myPrivateKey", 1000);
blockchain.transaction("recipientAddress", 250);
blockchain.showCurrentBalance();
blockchain.showTransactionHistory();

// Data Science Operations
dataset = data_science.loadCSV("scripts/data2.csv");
meanAge = data_science.calculateMean(dataset, "age");
medianAge = data_science.calculateMedian(dataset, "age");
stdDevAge = data_science.calculateStdDev(dataset, "age");
print->"Mean age: " + meanAge;
print->"Median age: " + medianAge;
print->"Standard Deviation of age: " + stdDevAge;

// Visualization
data_science.plotHistogram(dataset, "age", "scripts/age_histogram.png");
data_science.plotScatter(dataset, "age", "salary", "scripts/age_salary_scatter.png");

// Data Filtering
filteredData = data_science.filterData(dataset, "age", ">", 30);
print->"Filtered Data Instances (age > 30): " + filteredData.numInstances();

// -------------------------------------------------
// Database Operations
// -------------------------------------------------

// Connect to the Database
db.connect("jdbc:mysql://localhost:3306/supermarket", "root", "0000");
print->"Connected to the database.";

// Create a Table (if not exists)
createTableQuery = "CREATE TABLE IF NOT EXISTS employees ("
                + "id INT AUTO_INCREMENT PRIMARY KEY, "
                + "name VARCHAR(100) NOT NULL, "
                + "age INT, "
                + "salary DOUBLE)";
db.query(createTableQuery);
print->"Checked/Created table 'employees'.";

// Insert Records
insertQuery1 = "INSERT INTO employees (name, age, salary) VALUES ('Alice', 30, 70000)";
insertQuery2 = "INSERT INTO employees (name, age, salary) VALUES ('Bob', 25, 50000)";
insertQuery3 = "INSERT INTO employees (name, age, salary) VALUES ('Charlie', 35, 80000)";
db.query(insertQuery1);
db.query(insertQuery2);
db.query(insertQuery3);
db.query("SET SQL_SAFE_UPDATES = 0");

print->"Inserted 3 records into 'employees'.";

// Query Records
updateQuery = "UPDATE employees SET salary = 75000 WHERE name = 'Alice'";
db.query(updateQuery);
print->"Updated Alice's salary.";

// Query Updated Record
selectAlice = "SELECT * FROM employees WHERE name = 'Alice'";
alice = db.query(selectAlice);
print->"Updated Record for Alice:";

// Delete a Record
deleteQuery = "DELETE FROM employees WHERE name = 'Bob'";
db.query(deleteQuery);
print->"Deleted record for Bob.";

// Query After Deletion
selectAll = "SELECT * FROM employees";
remainingEmployees = db.query(selectAll);
print->"Employees Table After Deletion:" + remainingEmployees;

// Close the Database Connection
db.close();
print->"Closed the database connection.";